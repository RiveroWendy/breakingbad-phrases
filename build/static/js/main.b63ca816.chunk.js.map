{"version":3,"sources":["components/Phrase.js","App.js","serviceWorker.js","index.js"],"names":["ContainerPhrase","styled","div","Phrase","phrase","quote","author","Container","Button","button","App","useState","savePhrase","consultAPI","a","fetch","api","json","useEffect","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"i6BAIA,IAAMA,EAAkBC,IAAOC,IAAV,KA8CNC,EATA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACb,OACA,kBAACJ,EAAD,KACA,4BAAKI,EAAOC,OACZ,gCAAMD,EAAOE,U,4iBCxCjB,IAAMC,EAAYN,IAAOC,IAAV,KAQTM,EAASP,IAAOQ,OAAV,KAkDGC,MAjCf,WAAe,MAEgBC,mBAAS,IAFzB,mBAENP,EAFM,KAEEQ,EAFF,KAKRC,EAAU,uCAAG,8BAAAC,EAAA,sEACAC,MAAO,uDADP,cACZC,EADY,gBAGGA,EAAIC,OAHP,OAGZb,EAHY,OAIlBQ,EAAWR,EAAO,IAJA,2CAAH,qDAcf,OANFc,qBAAU,WACRL,MAEA,IAIE,kBAACN,EAAD,KACE,kBAAC,EAAD,CACAH,OAAQA,IAER,kBAACI,EAAD,CACAW,QAASN,GADT,mBC1CcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b63ca816.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\n\r\nconst ContainerPhrase = styled.div`\r\npadding:3rem;\r\nborder-radius:.5rem;\r\nbackground-color:#fff;\r\nmax-width:800px;\r\nmargin-top:10rem;\r\nmargin-bottom:3rem;\r\n\r\n@media (min-width : 992px){\r\n    margin-top:10rem;\r\n}\r\n\r\nh1{\r\nfont-family:Arial, Helvetica, sans-serif;\r\ntext-align:center;\r\nposition:relative;\r\npadding-left:4rem;\r\n\r\n&::before{\r\n    content:open-quote;\r\n    font-size:10rem;\r\n    color: #000;\r\n    position:absolute;\r\n    left:-1rem;\r\n    top: -2rem;\r\n}\r\n}\r\np{\r\n    font-family:Verdana, Geneva, Tahoma, sans-serif;\r\n    font-size:1.6rem;\r\n    font-weight:bold;\r\n    text-align:right;\r\n    color: #666;\r\n    margin-top:2rem;\r\n}\r\n`;\r\n\r\nconst Phrase = ({phrase}) => {\r\n    return (  \r\n    <ContainerPhrase>\r\n    <h1>{phrase.quote}</h1>\r\n    <p>- {phrase.author}</p>\r\n    </ContainerPhrase>\r\n    );\r\n}\r\n \r\nexport default Phrase;","import React,{useState, useEffect} from 'react';\nimport styled from '@emotion/styled';\nimport Phrase from './components/Phrase';\n\n\nconst Container = styled.div`\ndisplay:flex;\nalign-items:center;\npadding-top: 5rem;\nflex-direction:column;\n\n`;\n\nconst Button = styled.button`\nbackground:-webkit-linear-gradient(top left, #007d35 0%, #007d35 40%, #0f574e 100%);\nbackground-size: 300px;\nfont-family: Arial, Helvetica, sans-serif;\ncolor: #fff;\npadding: 1rem 3rem;\nfont-size: 2rem;\nborder: 2px solid black;\ntransition:background-size .8s ease;\n\n:hover{\n  cursor:pointer;\n  background-size: 400px;\n}\n`;\n\n\nfunction App() {\n  //states de frases\n  const [phrase, savePhrase] = useState({});\n\n\nconst  consultAPI = async () => {\n  const api = await fetch ('https://breaking-bad-quotes.herokuapp.com/v1/quotes');\n  //Promise\n  const phrase = await api.json();\n  savePhrase(phrase[0]);\n  \n}\n//Cargar una frase\nuseEffect(() =>{\n  consultAPI()\n\n},[]);\n\n\n  return (\n    <Container>\n      <Phrase\n      phrase={phrase}\n      />\n      <Button\n      onClick={consultAPI}\n      >\n        Obtener Frase\n      </Button>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}